import globimport osimport reimport numpy as npimport torchfrom skimage.measure import compare_psnrimport torch.nn.functional as Ffrom torch.autograd import Variablefrom math import expdef f2i_processs(x):    b, f, c = x.shape    x = x.permute(0, 2, 1).view(b,c,int(f**0.5),int(f**0.5))    return xdef i2f_process(x):    b,c,h,w = x.shape    x = x.permute(0,2,3,1).view(b,h*w,c)    return xdef is_image(img_name):    if img_name.endswith(".jpg") or img_name.endswith(".bmp") or img_name.endswith(".png"):        return True    else:        return  Falsedef findLastCheckpoint_step(save_dir):    file_list = glob.glob(os.path.join(save_dir, '*step*.pth'))    if file_list:        step_exist = []        for file_ in file_list:            result = re.findall(".*step(.*).pth.*", file_)            step_exist.append(int(result[0]))        initial_step = max(step_exist)    else:        initial_step = 0    return initial_stepdef find_last_model(save_dir):    return 'net_step101.pth'    if os.path.exists(os.path.join(save_dir, 'best.pth')):        print('find the best.pth')        return 'best.pth'    if os.path.exists(os.path.join(save_dir, 'net_latest.pth')):        print('find the net_latest.pth')        return 'net_latest.pth'    file_list = glob.glob(os.path.join(save_dir, '*step*.pth'))    if file_list:        step_exist = []        for file_ in file_list:            result = re.findall(".*step(.*).pth.*", file_)            step_exist.append(int(result[0]))        initial_step = max(step_exist)        print(f'find the {initial_step} step model')        return 'net_step'+str(initial_step)+'.pth'    else:        raise FileNotFoundError('can not find any trained model.')def batch_PSNR(img, imclean, data_range):    Img = img.data.cpu().numpy().astype(np.float32)    Iclean = imclean.data.cpu().numpy().astype(np.float32)    PSNR = 0    for i in range(Img.shape[0]):        PSNR += compare_psnr(Iclean[i,:,:,:], Img[i,:,:,:], data_range=data_range)    return (PSNR/Img.shape[0])def gaussian(window_size, sigma):    gauss = torch.Tensor([exp(-(x - window_size // 2) ** 2 / float(2 * sigma ** 2)) for x in range(window_size)])    return gauss / gauss.sum()def create_window(window_size, channel):    _1D_window = gaussian(window_size, 1.5).unsqueeze(1)    _2D_window = _1D_window.mm(_1D_window.t()).float().unsqueeze(0).unsqueeze(0)    window = Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())    return windowdef _ssim(img1, img2, window, window_size, channel, size_average=True):    mu1 = F.conv2d(img1, window, padding=window_size // 2, groups=channel)    mu2 = F.conv2d(img2, window, padding=window_size // 2, groups=channel)    mu1_sq = mu1.pow(2)    mu2_sq = mu2.pow(2)    mu1_mu2 = mu1 * mu2    sigma1_sq = F.conv2d(img1 * img1, window, padding=window_size // 2, groups=channel) - mu1_sq    sigma2_sq = F.conv2d(img2 * img2, window, padding=window_size // 2, groups=channel) - mu2_sq    sigma12 = F.conv2d(img1 * img2, window, padding=window_size // 2, groups=channel) - mu1_mu2    C1 = 0.01 ** 2    C2 = 0.03 ** 2    ssim_map = ((2 * mu1_mu2 + C1) * (2 * sigma12 + C2)) / ((mu1_sq + mu2_sq + C1) * (sigma1_sq + sigma2_sq + C2))    if size_average:        return ssim_map.mean()    else:        return ssim_map.mean(1).mean(1).mean(1)class SSIM(torch.nn.Module):    def __init__(self, window_size=11, size_average=True):        super(SSIM, self).__init__()        self.window_size = window_size        self.size_average = size_average        self.channel = 1        self.window = create_window(window_size, self.channel)    def forward(self, img1, img2):        (_, channel, _, _) = img1.size()        if channel == self.channel and self.window.data.type() == img1.data.type():            window = self.window        else:            window = create_window(self.window_size, channel)            if img1.is_cuda:                window = window.cuda(img1.get_device())            window = window.type_as(img1)            self.window = window            self.channel = channel        return _ssim(img1, img2, window, self.window_size, channel, self.size_average)def ssim(img1, img2, window_size=11, size_average=True):    (_, channel, _, _) = img1.size()    window = create_window(window_size, channel)    if img1.is_cuda:        window = window.cuda(img1.get_device())    window = window.type_as(img1)    return _ssim(img1, img2, window, window_size, channel, size_average)def normalize(data):    return data / 255.